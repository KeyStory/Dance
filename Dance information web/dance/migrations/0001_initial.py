# Generated by Django 4.2 on 2025-02-22 11:44

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('artist_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=50)),
                ('date_of_birth', models.DateField()),
                ('age', models.IntegerField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=10)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'artists',
            },
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('performance_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=100)),
                ('performance_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('venue', models.CharField(max_length=50)),
                ('participants_number', models.IntegerField()),
                ('status', models.CharField(choices=[('Com', 'Completed'), ('Can', 'Cancel'), ('Oth', 'Other')], max_length=10)),
            ],
            options={
                'db_table': 'performances',
            },
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('training_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=100)),
                ('training_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('venue', models.CharField(max_length=50)),
                ('participants_number', models.IntegerField()),
                ('status', models.CharField(choices=[('Com', 'Completed'), ('Can', 'Cancel'), ('Oth', 'Other')], max_length=10)),
            ],
            options={
                'db_table': 'trainings',
            },
        ),
        migrations.CreateModel(
            name='TrainingParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendance', models.CharField(choices=[('P', 'Present'), ('A', 'Absent'), ('L', 'Late')], default='P', max_length=10)),
                ('body_status', models.CharField(choices=[('H', 'Healthy'), ('I', 'Injured'), ('S', 'Sick'), ('O', 'Other')], default='H', max_length=10)),
                ('artist', models.ForeignKey(db_column='artist_id', on_delete=django.db.models.deletion.CASCADE, to='dance.artist')),
                ('training', models.ForeignKey(db_column='training_id', on_delete=django.db.models.deletion.CASCADE, to='dance.training')),
            ],
            options={
                'db_table': 'training_participants',
                'unique_together': {('training', 'artist')},
            },
        ),
        migrations.AddField(
            model_name='training',
            name='participants',
            field=models.ManyToManyField(related_name='trainings', through='dance.TrainingParticipant', to='dance.artist'),
        ),
        migrations.CreateModel(
            name='PerformanceParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=50)),
                ('attendance', models.CharField(choices=[('P', 'Present'), ('A', 'Absent'), ('L', 'Late')], default='P', max_length=10)),
                ('artist', models.ForeignKey(db_column='artist_id', on_delete=django.db.models.deletion.CASCADE, to='dance.artist')),
                ('performance', models.ForeignKey(db_column='performance_id', on_delete=django.db.models.deletion.CASCADE, to='dance.performance')),
            ],
            options={
                'db_table': 'performance_participants',
                'unique_together': {('performance', 'artist')},
            },
        ),
        migrations.AddField(
            model_name='performance',
            name='participants',
            field=models.ManyToManyField(related_name='performances', through='dance.PerformanceParticipant', to='dance.artist'),
        ),
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='生日')),
                ('job', models.CharField(blank=True, max_length=100, verbose_name='职业')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'app_user',
                'verbose_name_plural': 'app_user',
                'db_table': 'app_users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
